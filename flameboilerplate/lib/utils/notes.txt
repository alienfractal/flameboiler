import 'package:coolorburn/gen/assets.gen.dart';
import 'package:flame_audio/flame_audio.dart';

class GameAudioPlayer {
  final Map<String, AudioPool> _audioPools = {};
  final String assetsPrefix = "../../assets/";
  late bool isDisposed = false;
  List<String> asounds = List.empty();
  AudioPlayer? _audioPlayer;

  late AudioPlayer? audioPlayer;
  GameAudioPlayer(List<String> sounds) {
    isDisposed = false;
    asounds = sounds;
  }

  Future<void> init() async {
    if (!_audioPools.isEmpty) {
      print("init Audio pools already initialized");
      return;
    }
    for (var sound in asounds) {
      await _initializeAudioPool(sound);
    }
    if(_audioPlayer!=null){
      return;
    }
 _audioPlayer = await FlameAudio.playLongAudio(Assets.resources.audio.mfxintromenu,volume: 1.0); 
       _audioPlayer?.setReleaseMode(ReleaseMode.stop);
  }

  // Initialize AudioPool for a specific sound.
  Future<void> _initializeAudioPool(String fileLocation) async {
    //FlameAudio.createPool(assetsPrefix + fileLocation, maxPlayers: 5).then((value) { _audioPools[fileLocation] = pool; });}
    //AudioPool pool = await FlameAudio.createPool(assetsPrefix + fileLocation, maxPlayers: 5);
    AudioPool pool = await FlameAudio.createPool(fileLocation, maxPlayers: 5);
    _audioPools[fileLocation] = pool;
  }

  // Method to play a sound effect from the pool.
  Future<void> playSoundFx(String path) async {
    try {
      if (!isDisposed) {
        _audioPools[path]?.start();
      }
    } catch (e) {
      //print("Error playing sound: $e");
    }
  }

  // Method to play a sound effect from the pool.
  void   
  playMusicFx(String path, double volume)  {
    try {
      if(_audioPlayer == null){
        print("Audio is null ");
         FlameAudio.playLongAudio(Assets.resources.audio.mfxintromenu,volume: 1.0).then((audioPlayer) {
           _audioPlayer = audioPlayer;
           _audioPlayer?.setReleaseMode(ReleaseMode.release);
         });
        
      }

        print("Audio is playing ${_audioPlayer?.state}");
        if(_audioPlayer?.state == PlayerState.playing){
       
           return;
        }else if(_audioPlayer?.state == PlayerState.completed){
          _audioPlayer?.resume();
          return;
        }
    } catch (e) {
      print("Error audioPlayer sound: $e");
    }
  }

  // Method to dispose audio pools when no longer needed.
  void clearAudio() {
    isDisposed = true;
   
      
      for (AudioPool pool in _audioPools.values) {
        print(pool);
        pool.dispose();
      }

       _audioPlayer?.stop().then((value) {
        print("Audio player stopped");
       _audioPlayer?.state == PlayerState.stopped;
       });
  
  } 
}
